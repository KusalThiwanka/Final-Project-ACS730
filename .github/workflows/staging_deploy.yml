name: "Terraform Deploy"
# https://gaunacode.com/deploying-terraform-at-scale-with-github-actions
on:
  push:
    branches:
    - prod
    paths:
    - terraform/**/*

  pull_request:
    branches:
    - prod
    paths: 
    - terraform/**/*

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform-network:
    name: "Terraform Network Deployment"
    runs-on: ubuntu-latest
    environment: staging
    env:
      GITHUB_TOKEN: ${{ secrets.AWS_GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN:  ${{ secrets.AWS_SESSION_TOKEN }}
      PROJECT_KEYPAIR_PUB: ${{ secrets.PROJECT_KEYPAIR_PUB }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: true

      - name: Terraform fmt
        id: fmt
        run: terraform fmt 
        continue-on-error: true
        working-directory: ./terraform/network


      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform/network

           
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform/network

    
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color -out tf.plan
        working-directory: ./terraform/network
        continue-on-error: true

      - name: Get result
        run: echo "${{ steps.validate.outputs.stdout }}"
      
      - name: Terraform Show
        id: show
        run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
        working-directory: ./terraform/network
          
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.AWS_GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
              #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Apply
        if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        working-directory: ./terraform/network
        shell: bash

  terraform-webservers:
    name: "Terraform WebServers Deployment"
    runs-on: ubuntu-latest
    needs: terraform-network
    environment: staging
    env:
      GITHUB_TOKEN: ${{ secrets.AWS_GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN:  ${{ secrets.AWS_SESSION_TOKEN }}
      PROJECT_KEYPAIR_PUB: ${{ secrets.PROJECT_KEYPAIR_PUB }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: true

      - name: Create SSH Key File
        run: echo "${{ secrets.PROJECT_KEYPAIR_PUB }}" > project_keypair.pub
        working-directory: ./terraform/webservers

      - name: Terraform fmt
        id: fmt
        run: terraform fmt 
        continue-on-error: true
        working-directory: ./terraform/webservers


      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform/webservers

           
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform/webservers

    
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color -out tf.plan
        working-directory: ./terraform/webservers
        continue-on-error: true

      - name: Get result
        run: echo "${{ steps.validate.outputs.stdout }}"
      
      - name: Terraform Show
        id: show
        run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
        working-directory: ./terraform/webservers
          
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.AWS_GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
              #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Apply
        if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        working-directory: ./terraform/webservers
        shell: bash

  terraform-alb:
    name: "Terraform ALB Deployment"
    runs-on: ubuntu-latest
    needs: terraform-webservers
    environment: staging
    env:
      GITHUB_TOKEN: ${{ secrets.AWS_GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN:  ${{ secrets.AWS_SESSION_TOKEN }}
      PROJECT_KEYPAIR_PUB: ${{ secrets.PROJECT_KEYPAIR_PUB }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: true

      - name: Terraform fmt
        id: fmt
        run: terraform fmt 
        continue-on-error: true
        working-directory: ./terraform/alb


      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform/alb

           
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform/alb

    
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color -out tf.plan
        working-directory: ./terraform/alb
        continue-on-error: true

      - name: Get result
        run: echo "${{ steps.validate.outputs.stdout }}"
      
      - name: Terraform Show
        id: show
        run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
        working-directory: ./terraform/alb
          
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.AWS_GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
              #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Apply
        if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        working-directory: ./terraform/alb
        shell: bash


#   ansible:
#     name: Execute Ansible Playbook
#     needs: terraform
#     environment: staging
#     env:
#       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
#       AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       AWS_SESSION_TOKEN:  ${{ secrets.AWS_SESSION_TOKEN }}
#       PROJECT_KEYPAIR_PUB: ${{ secrets.PROJECT_KEYPAIR_PUB }}
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: '3.x'

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install boto3 ansible

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: "us-east-1"

#     - name: Run Ansible playbook
#       run: ansible-playbook -i aws_ec2.yml webserver_playbook.yaml